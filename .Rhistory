source('~/steam/Script/auc.R')
histogram(~gbm.probs$PS|testData$Class,xlab="Probability of Poor Segmentation")
gbm.ROC
gbm.ROC$auc
source('~/steam/Script/auc.R')
prSummary(testX, lev = levels(testData$Class))
prSummary(testData, lev = levels(testData$Class))
source('~/steam/Script/auc.R')
source('~/steam/Script/auc2.R')
source('~/steam/Script/auc2.R')
source('~/steam/Script/auc2.R')
View(data.train)
result.roc
x = data.train[,-5]
View(x)
source('~/steam/Script/auc3.R')
library(caret)
library (ROCR)
data(iris)
iris <- iris[iris$Species == "virginica" | iris$Species == "versicolor", ]
iris$Species <- factor(iris$Species)  # setosa should be removed from factor
iris$Species
View(data.test)
library(caret)
library(ROCR)
data(iris)
iris <- iris[iris$Species == "virginica" | iris$Species == "versicolor", ]
iris$Species <- factor(iris$Species)  # setosa should be removed from factor
samples <- sample(NROW(iris), NROW(iris) * .7)
data.train <- iris[samples, ]
data.test <- iris[-samples, ]
forest.model <- train(Species ~., data.train)
y <- data.test$Species # logical array of positive / negative cases
predictions <- predict(forest.model, data.test, type="prob") # Prediction
pred <- prediction(predictions, y);
# Recall-Precision curve
RP.perf <- performance(pred, "prec", "rec");
plot (RP.perf);
load("/run/user/1000/gvfs/sftp:host=di4.vcloud,user=baowaly/home/baowaly/steam/Evaluation/RG_GBM_All_V50_S100.Rdata")
View(comb.score)
load("/home/mmnet/steam/Evaluation/RG_GBM_All_V10_S20.Rdata")
View(comb.score)
load("/home/mmnet/steam/Evaluation/RG_GBM_All_V3_S10.Rdata")
View(comb.score)
load("/home/mmnet/steam/Evaluation/RG_GBM_All_V50_S100.Rdata")
View(comb.score)
source('~/steam/Script/test.R')
cor(predicted, actual)
cor.test(predicted, actual)
cor(actual, predicted)
cor.test(actual, predicted)
cor(actual, predicted)
cor.test(actual, predicted)
actual <- c(4, 6, 9, 10, 4, 6, 4, 7, 8, 7)
predicted <- c(5, 6, 8, 10, 4, 8, 4, 9, 8, 9)
# Calculate error
error <- actual - predicted
# Example of invocation of functions
print(rmse(error))
print(mae(error))
cor(actual, predicted)
cor.test(actual, predicted)
a<-10
print(a)
cat(a)
load("/run/user/1000/gvfs/sftp:host=di4.vcloud,user=baowaly/home/baowaly/steam/Evaluation/RG_GBM_All_V50_S80.Rdata")
View(comb.score)
summary(comb.score)
l.counter <- 1
paste0("Evaluation/xgboost.model.", l.counter)
library(caret)
library(ROCR)
data(iris)
data(iris)
library(caret)
library(ROCR)
data(iris)
iris <- iris[iris$Species == "virginica" | iris$Species == "versicolor", ]
iris$Species <- factor(iris$Species)  # setosa should be removed from factor
samples <- sample(NROW(iris), NROW(iris) * .7)
data.train <- iris[samples, ]
data.test <- iris[-samples, ]
forest.model <- train(Species ~., data.train)
y <- data.test$Species # logical array of positive / negative cases
predictions <- predict(forest.model, data.test, type="prob") # Prediction
predictions
y
source('~/steam/Script/rocr.R')
setwd("~/DataScience/R_scripts-master")
source('~/DataScience/R_scripts-master/rocr_wLegend.R')
View(active)
# ROC curve(s) with ROCR
# Chupakhin Vladimir (chupvl@gmail.com)
# loading ROCR library
library("ROCR")
# loading active compounds, or compounds with label1
active <- read.table("sample.active", sep=",", header=FALSE)
# loading inactive compounds, or compounds with label2
inactive <- read.table("sample.inactive", sep=",", header=FALSE)
# binding them and converting to matrix because ROCR works with matrix data
target_pred <- as.matrix(rbind(active,inactive))
# because number of the colums should be the same - making additional param
ncol <- ncol(inactive)
# generating classes (1 for active, 0 for inactive, but it can be 1 and -1 - there is no difference)
class.active <- matrix(sample(1, (ncol(active)*nrow(active)), replace=T), ncol=ncol)
class.inactive <- matrix(sample(0, (ncol(inactive)*nrow(inactive)), replace=T), ncol=ncol)
# binding the classes
target_class <- rbind(class.active,class.inactive)
target_pred
head(target_pred,5)
target_class
head(target_class,5)
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions,ROCR.simple$labels)
ROCR.simple
head(ROCR.simple)
source('~/DataScience/codes04/spamExam.R')
setwd("~/DataScience/codes04")
source('~/DataScience/codes04/spamExam.R')
View(spamD)
spamTrain <- subset(spamD,spamD$rgroup>=10)
spamTest <- subset(spamD,spamD$rgroup<10)
View(spamTest)
View(spamTrain)
spamVars <- setdiff(colnames(spamD),list('rgroup','spam'))
spamVars
length(spamVars)
spamFormula <- as.formula(paste('spam=="spam"',
paste(spamVars,collapse=' + '),sep=' ~ '))
spamFormula
spamModel <- glm(spamFormula,family=binomial(link='logit'), data=spamTrain)
spamTrain$pred <- predict(spamModel,newdata=spamTrain, type='response')
spamTest$pred <- predict(spamModel,newdata=spamTest, type='response')
View(spamTest)
print(with(spamTest,table(y=spam,glmPred=pred>0.5)))
sample <- spamTest[c(7,35,224,327),c('spam','pred')]
print(sample)
cM <- table(truth=spamTest$spam, prediction=spamTest$pred>0.5)
print(cM)
spamTest$pred
head(spamTest$pred, 5)
head(spamTest$spam, 5)
setwd("~/1052DataScience")
input_file <- "methods/method1.csv"
inputData <- read.csv(file=input_file, header=TRUE, sep=",")
method <- c(method, file_path_sans_ext(basename(input_file)))
predicted <- as.factor(inputData$prediction)
expected <- as.factor(inputData$reference)
predicted
expected
pred_vector <- as.numeric(inputData$pred.score) #make numeric
pred_vector
library(caret)
library(ROCR)
library(tools)
auc_pred <- prediction(predictions = pred_vector, labels = expected)
auc_pred
auc_perf <- performance(auc_pred,"auc");
auc_perf
auc_score <- c(auc_score, round(as.numeric(auc_perf@y.values),2))
auc_score <- c()
auc_score <- c(auc_score, round(as.numeric(auc_perf@y.values),2))
auc_score
print(attributes(performance(auc_pred,'auc'))$y.values[[1]])
pred_vector
pred_vector <- 1 - pred_vector
pred_vector
target <- 'female'
input_file <- "methods/method1.csv"
inputData <- read.csv(file=input_file, header=TRUE, sep=",")
predicted <- as.factor(inputData$prediction)
expected <- as.factor(inputData$reference)
pred_vector <- as.numeric(inputData$pred.score) #make numeric
if(target == "female")
pred_vector <- 1 - pred_vector
pred_vector
auc_pred <- prediction(predictions = pred_vector, labels = expected)
auc_perf <- performance(auc_pred,"auc");
auc_score <- c(auc_score, round(as.numeric(auc_perf@y.values),2))
auc_score
input_file <- "methods/method1.csv"
inputData <- read.csv(file=input_file, header=TRUE, sep=",")
predicted <- as.factor(inputData$prediction)
expected <- as.factor(inputData$reference)
conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "prec_recall")
conf_matrx
target <- 'male'
input_file <- "methods/method1.csv"
inputData <- read.csv(file=input_file, header=TRUE, sep=",")
predicted <- as.factor(inputData$prediction)
expected <- as.factor(inputData$reference)
conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "prec_recall")
conf_matrx
target <- 'female'
conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "prec_recall")
conf_matrx
tp <- 12
fn <- 10
fp <- 12
tn <- 5
precision <- tp/(tp+fn)
(precision <- tp/(tp+fn))
(recall <- tp/(tp+fn))
target <- "female"
conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "prec_recall")
conf_matrx
conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "sens_spec")
conf_matrx
conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "everything")
conf_matrx
sen <- tp/(tp+fn)
sen
spec <- tn / (tn+fp)
spec
target <- "male"
(conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "everything"))
tn <- 12
fp <- 10
fn <- 12
tp <- 5
(sen <- tp/(tp+fn))
(spec <- tn / (tn+fp))
(pre <- tp/(tp+fp))
(re <- tp/(tp+fn))
target <- 'female'
(conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "everything"))
tp <- 12
fn <- 10
fp <- 12
tn <- 5
(pre <- tp/(tp+fp))
(conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "prec_recall"))
conf_matrx
conf_matrx[1,]
conf_matrx[1,1]
(conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "everything"))
resultframe <- data.frame(reference=expected, predicted=predicted)
View(resultframe)
(rtab <- table(resultframe))
resultframe <- data.frame(Reference=expected, Prediction=predicted)
(rtab <- table(resultframe))
(CM <- table(resultframe))
CM[1,]
CM[1,1]
CM[1,2]
CM[2,2]
target <- 'male'
resultframe <- data.frame(Reference=expected, Prediction=predicted)
(CM <- table(resultframe))
if(target == "male"){
TP <- CM[2,2]
TN <- CM[1,1]
FP <- CM[1,2]
FN <- CM[2,1]
}else{
TP <- CM[1,1]
TN <- CM[2,2]
FP <- CM[2,1]
FN <- CM[1,2]
}
rm(list = ls())
input_file <- "methods/method1.csv"
inputData <- read.csv(file=input_file, header=TRUE, sep=",")
predicted <- as.factor(inputData$prediction)
expected <- as.factor(inputData$reference)
(conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "everything"))
target <- 'male'
(conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "everything"))
resultframe <- data.frame(Reference=expected, Prediction=predicted)
(CM <- table(resultframe))
#print(conf_matrx)
if(target == "male"){
TP <- CM[2,2]
TN <- CM[1,1]
FP <- CM[1,2]
FN <- CM[2,1]
}else{
TP <- CM[1,1]
TN <- CM[2,2]
FP <- CM[2,1]
FN <- CM[1,2]
}
pre <- TP/(TP+FP)
rec <- TP/(TP+FN)
sen <- rec
spe <- TN/(TN+FP)
f1 <- (2*pre*rec)/(pre*rec)
(2*pre*rec)/(pre*rec)
(2*pre*rec)/(pre+rec)
target <- 'female'
input_file <- "methods/method1.csv"
inputData <- read.csv(file=input_file, header=TRUE, sep=",")
predicted <- as.factor(inputData$prediction)
expected <- as.factor(inputData$reference)
(conf_matrx <- confusionMatrix(data=predicted, reference=expected, positive=target, mode = "everything"))
resultframe <- data.frame(Reference=expected, Prediction=predicted)
(CM <- table(resultframe))
#print(conf_matrx)
if(target == "male"){
TP <- CM[2,2]
TN <- CM[1,1]
FP <- CM[1,2]
FN <- CM[2,1]
}else{
TP <- CM[1,1]
TN <- CM[2,2]
FP <- CM[2,1]
FN <- CM[1,2]
}
pre <- TP/(TP+FP)
rec <- TP/(TP+FN)
sen <- rec
spe <- TN/(TN+FP)
f1 <- (2*pre*rec)/(pre+rec)
sensitivity <- c(sensitivity, round(sen,2))
specificity <- c(specificity, round(spe,2))
f1_score <- c(f1_score, round(f1,2))
source('~/steam/Script/auc3.R')
predictions
source('~/steam/Script/auc3.R')
# load data
target <- "male"
out_f <- "result.csv"
input_file <- "methods/method1.csv"
inputData <- read.csv(file=input_file, header=TRUE, sep=",")
View(inputData)
source('~/1052DataScience/spamExam.R')
source('~/1052DataScience/spamExam.R')
source('~/1052DataScience/spamExam.R')
